[gd_scene load_steps=5 format=2]

[sub_resource type="GDScript" id=2]
script/source = "extends Spatial

export(float) var hight :float = 4.0
export(float) var destiny :float = 3.0
export(float) var dragging_magnitude :float = 10.0
export(Vector2) var axes_speed :Vector2 = Vector2(6.0,3.0)
export(Vector3) var distance :Vector3 = Vector3(2.0, 1.0,0.0)
export(int) var line :int = 3
export(int) var i :int = 0

var pivot :Vector3 = Vector3.ZERO
var dir :Vector2 = Vector2.ZERO
var count :float = 0.0
var s_i : float = 0.0
var s_f :float = 0.0
var last_s_f :float = 0.0
var pressed :bool = false
var count_line :int = 0
var on_floor :bool = false
var on_top :bool = true
var jumping :bool = false
var h_move :bool = false
var count_h_move :float = 0.0
var jump_top :bool = false
var jump_up :bool = false
var jump_down :bool = false
var jump_count :int = 0
var slide :bool = false
var error :float = 0.5

var frontal_collision :bool  = false
var sido_left_colision :bool = false
var sido_right_colision :bool = false

const gravity :float  = -9.8
enum OPT_AXES {x, y, z}

func _ready():
	
	$on_floor.global_transform.origin = -$on_floor.cast_to/2.0 + global_transform.origin * Vector3(1.0, 0.0, 1.0)
	$head.global_transform.origin = -$head.cast_to/2.0 + global_transform.origin * Vector3(1.0, 0.0, 1.0)
	$left.global_transform.origin = $right.cast_to/2.0 + global_transform.origin * Vector3(0.0, 1.0, 1.0)
	$right.global_transform.origin = -$right.cast_to/2.0 + global_transform.origin * Vector3(0.0, 1.0, 1.0)
	
	$on_floor.force_raycast_update()
	pivot = $Area/CollisionShape.shape.extents
	s_i =  $on_floor.get_collision_point().y + pivot.y
	s_f = s_i
	last_s_f = s_i 
	
	for item in get_tree().get_nodes_in_group(\"ignore\"):
		$forward.add_exception(item)

func _unhandled_input(event):
	if event is InputEventScreenTouch and event.is_pressed():
		pressed = true
	if event is InputEventScreenDrag:
		if event.relative.length() > dragging_magnitude and pressed:
			var teta = rad2deg(event.relative.angle_to(Vector2.UP))
			if teta >  45 and teta < 135:
				move_left() 
				count_line -= 1
			elif teta < -45 and teta > -135:
				move_right()
				count_line += 1
			elif teta <  45 and teta > -45:
				jump()
			else:
				swipe()
			pressed = false

func _process(delta):
	jump_movimente(delta)
	horizontal_moviment(delta)
	var d = get_viewport().get_camera().transform.origin - transform.origin
	var p = get_viewport().get_camera().project_position(get_viewport().get_mouse_position(), d.length())
	$bola.global_transform.origin = p 


func move_left():
	dir.x = -1

func move_right():
	dir.x = 1

func punishment():
	var col_pos = cover_surface(OPT_AXES.x)

func cover_surface(var axes :int):
	var rect :Rect2 = build_rect(axes,global_transform.origin, $Area/CollisionShape.shape.extents)
	var list = [rect.position - rect.size/2.0, 
		rect.position - rect.size * Vector2.UP + Vector2(-rect.size.x, rect.size.y) /2.0, 
		rect.position  + rect.size * Vector2.RIGHT + Vector2(rect.size.x, -rect.size.y) /2.0,
		rect.position + rect.size + rect.size /2.0]
	var value : Vector3 = Vector3.ZERO
	
	match axes:
		0:
			for pos in list:
				$right.global_transform.origin = Vector3($right.global_transform.origin.x, list[0].y, list[0].x)
				if $right.get_collider() != null:
					sido_right_colision = true
		1: 
			for pos in list:
#				$forward.global_transform.origin = Vector3(pos.x, $forward.global_transform.origin.y, pos.y)
				pass
		2:
			for pos in list:
				$forward.global_transform.origin = Vector3(pos.x, pos.y, $forward.global_transform.origin.z)
				$forward.force_raycast_update()
				if $forward.is_colliding():
					GameParam.speed = 0
					value = $forward.get_collision_point() + pivot.z * Vector3.BACK
					var obj :Spatial = instance_from_id($forward.get_collider().get_instance_id())
					global_transform.origin = Vector3(global_transform.origin.x, global_transform.origin.y, value.z)
	return value

func build_rect(var axes :int, var value0 :Vector3, var value1 : Vector3, var center :bool = true):
	var position :Vector2 = Vector2.ZERO
	var extents :Vector2 = Vector2.ZERO
	var centered :float  = 0.0
	if center:
		centered  = 0.5
	match axes:
		0:
			extents = Vector2(value1.z, value1.y)
			position = Vector2(value0.z - extents.x * centered, value0.y - extents.y * centered)
		1: 
			extents = Vector2(value1.x, value1.z)
			position = Vector2(value0.x - extents.x * centered, value0.z - extents.y * centered)
		2:
			extents = Vector2(value1.x, value1.y)
			position = Vector2(value0.x - extents.x * centered, value0.y - extents.y * centered)
	return Rect2(position, extents)

func jump():
	if jump_count < 3:
		count = 0.0
		jumping = true
		jump_count += 1
		on_floor = false
		s_i = last_s_f

func swipe():
	if on_floor:
		print_debug(\"deslisou\")

func horizontal_moviment(var delta: float):
	if dir.x != 0.0:
		if count_h_move > destiny:
			count_h_move = 0.0 
			dir.x = 0.0
			h_move = false
		elif sido_right_colision:
			dir.x = -dir.x
			sido_right_colision = false
		else:
			h_move = true
			count_h_move += delta * pow(axes_speed.x,2.0)
			transform.origin.x += delta * dir.x * pow(axes_speed.x,2.0)

func jump_movimente(var delta: float):
	if not on_floor:
		if jumping:
			
			if not h_move:
				count += axes_speed.y * delta
			
			var h :float =  0.0 
			var sqr :float = 0.0
			if jump_count == 2:
				h = (hight * 2.0) / pow(distance.z/2.0,2.0)
				jump_count += 1
				s_i = transform.origin.y + pivot.y
			else:
				h = hight / pow(distance.z/2.0,2.0)
				sqr = distance.z * count -pow(count , 2.0)
				s_f = s_i + sqr * h 
				
			avaliable_jump_states(hight - sqr * h, (distance.z/2.0) - count)
			
			if s_f <= $on_floor.get_collision_point().y + pivot.y:
				s_f = $on_floor.get_collision_point().y + pivot.y
				last_s_f = s_f
				jump_count = 0
		else:
			if transform.origin.y - pivot.y >= $on_floor.get_collision_point().y:
				if not h_move:
					s_f = transform.origin.y - axes_speed.y * count + gravity * pow(count,2.0)/2.0 
					count += delta
				if s_f <= $on_floor.get_collision_point().y + pivot.y:
					s_f = $on_floor.get_collision_point().y + pivot.y 
					last_s_f = s_f
					jump_count = 0
					count = 0
			pass
		global_transform.origin.y = s_f 
	
func avaliable_jump_states(var top :float, var d :float):
	if top == 0.0:
		jump_top = true
	elif d > 0:
		jump_up = true
	else:
		jump_down = true

func _on_area_entered(area):
	punishment()
	
	jump_count = 0
	count = 0.0
	jumping = false
	
	jump_top = false
	jump_up = false
	jump_down = false
	

func _on_area_exited(area):
	on_floor = false
"

[sub_resource type="CapsuleMesh" id=1]

[sub_resource type="SphereMesh" id=3]
radius = 0.2
height = 0.4

[sub_resource type="BoxShape" id=5]
extents = Vector3( 1, 1.5, 1 )

[node name="player" type="Spatial"]
script = SubResource( 2 )
distance = Vector3( 0, 0, 2 )

[node name="mesh" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0 )
mesh = SubResource( 1 )

[node name="head" type="RayCast" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1 )
visible = false
enabled = true
cast_to = Vector3( 0, 50, 0 )
collide_with_areas = true
collide_with_bodies = false
debug_shape_custom_color = Color( 0, 0.156863, 1, 1 )

[node name="on_floor" type="RayCast" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 50, 0 )
cast_to = Vector3( 0, -100, 0 )
collision_mask = 2
collide_with_areas = true
collide_with_bodies = false
debug_shape_custom_color = Color( 1, 0, 0, 1 )

[node name="forward" type="RayCast" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 50 )
enabled = true
cast_to = Vector3( 0, 0, -100 )
collide_with_areas = true
collide_with_bodies = false
debug_shape_custom_color = Color( 0.290196, 1, 0, 1 )

[node name="left" type="RayCast" parent="."]
visible = false
enabled = true
cast_to = Vector3( -50, 0, 0 )
collision_mask = 2
collide_with_areas = true
collide_with_bodies = false
debug_shape_custom_color = Color( 1, 0.494118, 0, 1 )

[node name="right" type="RayCast" parent="."]
enabled = true
cast_to = Vector3( 50, 0, 0 )
collide_with_areas = true
collide_with_bodies = false
debug_shape_custom_color = Color( 0, 1, 0.976471, 1 )

[node name="Tween" type="Tween" parent="."]

[node name="bola" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 2.78575, 0, 0 )
mesh = SubResource( 3 )

[node name="Area" type="Area" parent="."]
collision_layer = 4

[node name="CollisionShape" type="CollisionShape" parent="Area"]
shape = SubResource( 5 )

[connection signal="area_entered" from="Area" to="." method="_on_area_entered"]
[connection signal="area_exited" from="Area" to="." method="_on_area_exited"]
