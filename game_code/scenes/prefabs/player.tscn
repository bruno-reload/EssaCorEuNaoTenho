[gd_scene load_steps=3 format=2]

[sub_resource type="GDScript" id=2]
script/source = "extends Spatial

export(float) var jump_speed :float = 3.0 
export(float) var hight :float = 4.0
export(Vector2) var axes_speed :Vector2 = Vector2(10.0,10.0)
export(Vector3) var distance :Vector3 = Vector3(2.0, 1.0,0.0)

onready var tween = $Tween
var count :float = 0.0
var on_floor :bool = true
var s_i : float = 0.0
var s_f :float = 0.0
var pivot_y :float = 0.0
var start : Vector2 = Vector2.ZERO 
var dir :Vector2 = Vector2.ZERO

const gravity :float  = 9.8


func _ready():
	$on_floor.force_raycast_update()
	pivot_y = $mesh.get_transformed_aabb().size.y/2.0
	s_i =  $on_floor.get_collision_point().y  + pivot_y
	s_f = s_i 

func _unhandled_input(event):
	if event is InputEventScreenTouch and event.is_pressed():
		start = event.position
	if event is InputEventScreenDrag:
		if event.relative.length() > 10:
			var teta = rad2deg(event.relative.angle_to(Vector2.UP))
			if teta >  45 and teta < 135:
				move_left()
			elif teta < -45 and teta > -135:
				move_right()
			elif teta <  45 and teta > -45:
				jump()
			else:
				swipe()
	

func _process(delta):
	anim_jump(delta)

func horizontal_moviment():
	if start.x > 0.0 and on_floor:
		tween.interpolate_property(self,\"translation:x\",transform.origin.x, transform.origin.x + dir.x * distance.x, 0.1, Tween.TRANS_LINEAR, Tween.EASE_IN_OUT )
		tween.start()
		start.x = 0.0

func move_left():
	dir.x = -1
	horizontal_moviment()

func move_right():
	dir.x = 1
	horizontal_moviment()

func anim_jump(var delta: float):
	if not on_floor:
		count += jump_speed * delta
		
		var h = hight / pow(distance.y/2.0,2.0)
		var sqr = distance.y * count -pow(count , 2.0)
		
		transform.origin.y = s_i + sqr * h
		
		if transform.origin.y - pivot_y - $on_floor.get_collision_point().y < 0.1:
			on_floor = true
			count = 0
	else:
		if  transform.origin.y - pivot_y - $on_floor.get_collision_point().y > 0.1:
			s_f -= gravity * delta
		elif not $on_floor.get_collider() == null:
			s_f = $on_floor.get_collision_point().y  + pivot_y
		transform.origin.y = s_f

func jump():
	on_floor = false
	s_i = s_f

func swipe():
	print_debug(\"deslisou\")
	pass
"

[sub_resource type="CapsuleMesh" id=1]

[node name="player" type="Spatial"]
script = SubResource( 2 )

[node name="mesh" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0 )
mesh = SubResource( 1 )

[node name="on_floor" type="RayCast" parent="."]
enabled = true
cast_to = Vector3( 0, -10, 0 )
collide_with_areas = true
collide_with_bodies = false
debug_shape_custom_color = Color( 0, 0.156863, 1, 1 )

[node name="forward" type="RayCast" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1 )
enabled = true
cast_to = Vector3( 0, -10, 0 )
collide_with_areas = true
collide_with_bodies = false
debug_shape_custom_color = Color( 0.290196, 1, 0, 1 )

[node name="backward" type="RayCast" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1 )
enabled = true
cast_to = Vector3( 0, -10, 0 )
collide_with_areas = true
collide_with_bodies = false
debug_shape_custom_color = Color( 0.290196, 1, 0, 1 )

[node name="Tween" type="Tween" parent="."]
