[gd_scene load_steps=5 format=2]

[sub_resource type="GDScript" id=2]
script/source = "extends Spatial

export(float) var hight :float = 4.0
export(float) var destiny :float = 2.0
export(float) var jump_speed :float = 3.0 
export(float) var dragging_magnitude :float = 10.0
export(Vector2) var axes_speed :Vector2 = Vector2(10.0,10.0)
export(Vector3) var distance :Vector3 = Vector3(2.0, 1.0,0.0)
export(int) var line :int = 3

onready var tween = $Tween
var count :float = 0.0
var on_floor :bool = true
var on_top :bool = true
var s_i : float = 0.0
var s_f :float = 0.0
var pivot :Vector3 = Vector3.ZERO
var start : Vector2 = Vector2.ZERO 
var dir :Vector2 = Vector2.ZERO
var count_destiny :float = 0.0
var pressed :bool = false
var count_line :int = 0

###############################################################################
var temporary_count_time = 0.0                                                #
###############################################################################

const gravity :float  = 9.8

func _ready():
	$on_floor.force_raycast_update()
	pivot = $mesh.get_transformed_aabb().size/2.0
	s_i =  $on_floor.get_collision_point().y  + pivot.y
	s_f = s_i 

func _unhandled_input(event):
	if event is InputEventScreenTouch and event.is_pressed():
		start = event.position
		pressed = true
	if event is InputEventScreenDrag:
		if event.relative.length() > dragging_magnitude and pressed:
			var teta = rad2deg(event.relative.angle_to(Vector2.UP))
			if teta >  45 and teta < 135:
				move_left() 
				count_line -= 1
			elif teta < -45 and teta > -135:
				move_right()
				count_line += 1
			elif teta <  45 and teta > -45:
				jump()
			else:
				swipe()
			pressed = false

func _process(delta):
	anim_jump(delta)
	anim_horizontal(delta)
	var d = get_viewport().get_camera().transform.origin - transform.origin
	var p = get_viewport().get_camera().project_position(get_viewport().get_mouse_position(), d.length())
	$bola.global_transform.origin = p 

func move_left():
	dir.x = -1

func move_right():
	dir.x = 1

func jump():
	on_floor = false
	s_i = s_f

func swipe():
	print_debug(\"deslisou\")

func anim_horizontal(var delta: float):
	if not dir.x == 0.0 and on_floor:
		if count_destiny > destiny:
			count_destiny = 0.0 
			dir.x = 0.0
		else:
			count_destiny += delta * axes_speed.x
			transform.origin.x += delta * dir.x * axes_speed.x

func anim_jump(var delta: float):
	if not on_floor:
		count += jump_speed * delta
		
		var h = hight / pow(distance.z/2.0,2.0)
		var sqr = distance.z * count -pow(count , 2.0)
		transform.origin.y = s_i + sqr * h
		var foot = transform.origin.y - pivot.y - $on_floor.get_collision_point().y
		
		if foot < 0.01:
			on_floor = true
			count = 0
	else:
		var foot_forward = transform.origin.y - pivot.y - $on_floor.get_collision_point().y
		if  foot_forward > 0.1:
			count += delta
			var foot_backward = count > $mesh.get_transformed_aabb().size.z/ GameParam.speed
			if foot_backward:
				s_f -= gravity * delta
		elif not $on_floor.get_collider() == null:
			s_f = $on_floor.get_collision_point().y + pivot.y
			count = 0.0
		transform.origin.y = s_f
"

[sub_resource type="SpatialMaterial" id=4]
flags_transparent = true
albedo_color = Color( 1, 1, 1, 0.298039 )

[sub_resource type="CapsuleMesh" id=1]
material = SubResource( 4 )

[sub_resource type="SphereMesh" id=3]

[node name="player" type="Spatial"]
script = SubResource( 2 )
hight = 6.0
destiny = 4.0
axes_speed = Vector2( 30, 60 )
distance = Vector3( 0, 0, 2 )

[node name="mesh" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0 )
mesh = SubResource( 1 )

[node name="head" type="RayCast" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1 )
enabled = true
cast_to = Vector3( 0, 10, 0 )
collide_with_areas = true
collide_with_bodies = false
debug_shape_custom_color = Color( 0, 0.156863, 1, 1 )

[node name="on_floor" type="RayCast" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1 )
enabled = true
cast_to = Vector3( 0, -10, 0 )
collide_with_areas = true
collide_with_bodies = false
debug_shape_custom_color = Color( 1, 0, 0, 1 )

[node name="forward" type="RayCast" parent="."]
enabled = true
cast_to = Vector3( 0, 0, -10 )
collide_with_areas = true
collide_with_bodies = false
debug_shape_custom_color = Color( 0.290196, 1, 0, 1 )

[node name="left" type="RayCast" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1 )
enabled = true
cast_to = Vector3( -10, 0, 0 )
collide_with_areas = true
collide_with_bodies = false
debug_shape_custom_color = Color( 1, 0.494118, 0, 1 )

[node name="right" type="RayCast" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1 )
enabled = true
cast_to = Vector3( 10, 0, 0 )
collide_with_areas = true
collide_with_bodies = false
debug_shape_custom_color = Color( 0, 1, 0.976471, 1 )

[node name="Tween" type="Tween" parent="."]

[node name="bola" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 2.78575, 0, 0 )
mesh = SubResource( 3 )
